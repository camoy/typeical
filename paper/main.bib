@ARTICLE{brehmer:2013,
  author={M. {Brehmer} and T. {Munzner}},
  journal={IEEE Transactions on Visualization and Computer Graphics},
  title={A Multi-Level Typology of Abstract Visualization Tasks},
  year={2013},
  volume={19},
  number={12},
  pages={2376-2385},}

@ARTICLE{kosara:2006,
author={R. {Kosara} and F. {Bendix} and H. {Hauser}},
journal={IEEE Transactions on Visualization and Computer Graphics},
title={Parallel Sets: interactive exploration and visual analysis of categorical data},
year={2006},
volume={12},
number={4},
pages={558-568},
keywords={data analysis;data visualisation;interactive systems;very large databases;Parallel Sets;categorical data interactive exploration;categorical data visualization;information visualization;large CRM data set;housing data;Data analysis;Data visualization;Computer Society;Switches;Performance analysis;Frequency;Buildings;Statistics;Information visualization;interaction;nominal data;categorical data;multivariate data.;Computer Graphics;Computer Simulation;Data Display;Data Interpretation, Statistical;Databases, Factual;Image Interpretation, Computer-Assisted;Information Storage and Retrieval;Models, Statistical;User-Computer Interface},
doi={10.1109/TVCG.2006.76},
ISSN={2160-9306},
month={July},}

@INPROCEEDINGS{latoza:2011,
author={T. D. {LaToza} and B. A. {Myers}},
booktitle={2011 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC)},
title={Visualizing call graphs},
year={2011},
volume={},
number={},
pages={117-124},
keywords={program debugging;program visualisation;reverse engineering;interactive call graph visualization;REACHER;program visualization;program comprehension;control flow;Visualization;Navigation;Context;Joining processes;Debugging;Vegetation;Upper bound;code exploration;call graphs;control flow;program visualization;program comprehension},
doi={10.1109/VLHCC.2011.6070388},
ISSN={1943-6092},
month={Sep.},}

@INPROCEEDINGS{bohnet:2009,
author={J. {Bohnet} and M. {Koeleman} and J. {Doellner}},
booktitle={2009 5th IEEE International Workshop on Visualizing Software for Understanding and Analysis},
title={Visualizing massively pruned execution traces to facilitate trace exploration},
year={2009},
volume={},
number={},
pages={57-64},
keywords={program visualisation;software maintenance;system monitoring;pruned execution traces visualisation;trace exploration;software maintenance tasks;repetition-aware visualizations;prototypical analysis tool;C/C++ software systems;Visualization;Programming profession;Software systems;Navigation;Software prototyping;Control systems;Electrical equipment industry;Documentation;Image analysis;Scalability},
doi={10.1109/VISSOF.2009.5336416},
ISSN={null},
month={Sep.},}

@INPROCEEDINGS{telea:2009,
author={A. {Telea} and H. {Hoogendorp} and O. {Ersoy} and D. {Reniers}},
booktitle={2009 5th IEEE International Workshop on Visualizing Software for Understanding and Analysis},
title={Extraction and visualization of call dependencies for large C/C++ code bases: A comparative study},
year={2009},
volume={},
number={},
pages={81-88},
keywords={C++ language;graph theory;program visualisation;call dependencies visualization;C/C++ code bases;function calls;call-and-hierarchy graphs;node-link diagrams;call dependencies extraction;program dependencies;integrated pipeline;Data visualization;Data mining;Pipelines;Software systems;Robustness;Mathematics;Permission;Large-scale systems;Software testing;System testing},
doi={10.1109/VISSOF.2009.5336419},
ISSN={null},
month={Sep.},}

@article{shneiderman:1992,
author = {Shneiderman, Ben},
title = {Tree Visualization with Tree-Maps: 2-d Space-Filling Approach},
year = {1992},
issue_date = {Jan. 1992},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {11},
number = {1},
issn = {0730-0301},
url = {https://doi.org/10.1145/102377.115768},
doi = {10.1145/102377.115768},
journal = {ACM Trans. Graph.},
month = jan,
pages = {92â€“99},
numpages = {8}
}

@article{lopes:2017,
author = {Lopes, Cristina V. and Maj, Petr and Martins, Pedro and Saini, Vaibhav and Yang, Di and Zitny, Jakub and Sajnani, Hitesh and Vitek, Jan},
title = {D\'{e}j\`{a}Vu: A Map of Code Duplicates on GitHub},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3133908},
doi = {10.1145/3133908},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {84},
numpages = {28},
keywords = {Source Code Analysis, Clone Detection}
}

@inproceedings{morandat:2012,
author = {Morandat, Flor{\'e}al and Hill, Brandon and Osvald, Leo and Vitek, Jan},
 title = {Evaluating the Design of the R Language: Objects and Functions for Data Analysis},
 booktitle = {European Conference on Object-Oriented Programming (ECOOP)},
 year = {2012},
 doi = {10.1007/978-3-642-31057-7_6}}

@inproceedings{tobin-hochstadt:2006,
    author = {Tobin-Hochstadt, Sam and Felleisen, Matthias},
    booktitle = {OOPSLA '06: Companion to the 21st ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications},
    citeulike-article-id = {2898851},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1176617.1176755},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/1176617.1176755},
    date-added = {2010-09-08 04:06:24},
    location = {Portland, Oregon, USA},
    priority = {2},
    publisher = {ACM},
    title = {Interlanguage migration: from scripts to programs},
    x-abstract = {As scripts grow into full-fledged applications, programmers should want to port portions of their programs from scripting languages to languages with sound and rich type systems. This form of interlanguage migration ensures type-safety and provides minimal guarantees for reuse in other applications, {too.In} this paper, we present a framework for expressing this form of interlanguage migration. Given a program that consists of modules in the untyped lambda calculus, we prove that rewriting one of them in a simply typed lambda calculus produces an equivalent program and adds the expected amount of type safety, i.e.,  code in typed modules can't go wrong . To ensure these guarantees, the migration process infers constraints from the statically typed module and imposes them on the dynamically typed modules in the form of behavioral contracts.},
    x-address = {New York, NY, USA},
    x-doi = {10.1145/1176617.1176755},
    x-isbn = {1-59593-491-X},
    x-url = {http://dx.doi.org/10.1145/1176617.1176755},
    xpages = {964--974},
    year = {2006}}

@inproceedings{siek:2006,
  title={Gradual typing for functional languages},
  author={Siek, Jeremy G. and Taha, Walid},
  booktitle={Scheme and Functional Programming Workshop},
  volume={6},
  pages={81--92},
  year={2006}
}

@inproceedings{tobin-hochstadt:2016,
    author = {Sam Tobin-Hochstadt and Matthias Felleisen and Robert Bruce Findler and Matthew Flatt and Ben Greenman and Andrew M. Kent and Vincent St-Amour and T. Stephen Strickland and Asumu Takikawa},
    title = {Migratory Typing: Ten Years Later},
    booktitle = {{SNAPL}},
    pages = {17:1--17:17},
    year = {2017},
    doi = {http://dx.doi.org/10.4230/LIPIcs.SNAPL.2017.17},
}

@ARTICLE{turcotte:2020,
  author={Alexi Turcotte},
  booktitle = {Manuscript submitted for publication},
  title={Designing Types for {R}, Empirically},
  year={2020},}

@ARTICLE{sugiyama:1981,
  author={K. {Sugiyama} and S. {Tagawa} and M. {Toda}},
  journal={IEEE Transactions on Systems, Man, and Cybernetics},
  title={Methods for Visual Understanding of Hierarchical System Structures},
  year={1981},
  volume={11},
  number={2},
  pages={109-125},}
